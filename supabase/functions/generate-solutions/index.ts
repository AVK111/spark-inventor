import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface Solution {
  title: string;
  description: string;
  feasibilityScore: number;
  costEstimate: string;
  sustainabilityScore: number;
  innovationScore: number;
  agentType: string;
}

// Gemini API integration with RAG query format
async function generateWithGemini(problemDescription: string, geminiApiKey: string) {
  const ragQuery = {
    "task": "problem_solving",
    "user_problem": problemDescription,
    "instructions": [
      "Retrieve relevant knowledge, research papers, documentation, and examples.",
      "Generate at least 3 detailed solutions/approaches to the problem.",
      "For each solution:",
      " - Provide a step-by-step explanation.",
      " - Assign a score out of 10 (based on feasibility, efficiency, clarity, or accuracy).",
      " - List sources and references (from retrieved context + external citations).",
      "Present the solutions in a structured format: Solution #, Score, Explanation, References."
    ],
    "output_format": {
      "solutions": [
        {
          "solution_id": 1,
          "score": "X/10",
          "explanation": "Detailed step-by-step reasoning of the solution",
          "references": ["Source 1", "Source 2", "Documentation link"]
        }
      ]
    }
  };

  const prompt = `You are an expert RAG-powered innovation consultant with access to real-time research data.

RAG Query: ${JSON.stringify(ragQuery, null, 2)}

Execute this RAG query to:
1. Retrieve relevant knowledge, research papers, and documentation for: "${problemDescription}"
2. Generate exactly 3 detailed, evidence-based solutions
3. For each solution, provide step-by-step explanation with a score out of 10
4. Include real sources and references from retrieved research context

Respond in this exact JSON format:
{
  "solutions": [
    {
      "solution_id": 1,
      "score": "8/10",
      "explanation": "Detailed step-by-step reasoning and implementation approach",
      "references": ["Actual research paper 1", "Industry report 2", "Documentation 3"]
    },
    {
      "solution_id": 2, 
      "score": "9/10",
      "explanation": "Another detailed approach with implementation steps",
      "references": ["Source 1", "Source 2", "Source 3"]
    },
    {
      "solution_id": 3,
      "score": "7/10", 
      "explanation": "Third solution with step-by-step breakdown",
      "references": ["Reference 1", "Reference 2", "Reference 3"]
    }
  ]
}`;

  try {
    console.log('Executing RAG query with Gemini API...');
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 4000,
        }
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Gemini API error:', response.status, errorText);
      throw new Error(`Gemini API error: ${response.status}`);
    }

    const data = await response.json();
    console.log('Gemini response received');

    if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
      throw new Error('Invalid Gemini response structure');
    }

    const content = data.candidates[0].content.parts[0].text;
    
    // Extract JSON from response (Gemini sometimes includes extra text)
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('No valid JSON found in Gemini response');
    }

    const parsed = JSON.parse(jsonMatch[0]);
    const solutions = parsed.solutions || [];

    if (!Array.isArray(solutions) || solutions.length === 0) {
      throw new Error('No valid solutions generated by Gemini');
    }

    console.log(`Gemini generated ${solutions.length} RAG-powered solutions`);

    return new Response(JSON.stringify({ 
      solutions,
      source: 'gemini',
      ragQuery: true
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Gemini API failed:', error);
    // Fallback to OpenAI if available
    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    if (openAIApiKey) {
      console.log('Falling back to OpenAI...');
      return await generateWithOpenAI(problemDescription, openAIApiKey);
    }
    // Final fallback to mock data
    return generateFallbackSolutions(problemDescription);
  }
}

// OpenAI integration (fallback) with RAG query format
async function generateWithOpenAI(problemDescription: string, openAIApiKey: string) {
  const ragQuery = {
    "task": "problem_solving",
    "user_problem": problemDescription,
    "instructions": [
      "Retrieve relevant knowledge, research papers, documentation, and examples.",
      "Generate at least 3 detailed solutions/approaches to the problem.",
      "For each solution:",
      " - Provide a step-by-step explanation.",
      " - Assign a score out of 10 (based on feasibility, efficiency, clarity, or accuracy).",
      " - List sources and references (from retrieved context + external citations).",
      "Present the solutions in a structured format: Solution #, Score, Explanation, References."
    ],
    "output_format": {
      "solutions": [
        {
          "solution_id": 1,
          "score": "X/10",
          "explanation": "Detailed step-by-step reasoning of the solution",
          "references": ["Source 1", "Source 2", "Documentation link"]
        }
      ]
    }
  };

  const prompt = `Execute this RAG query: ${JSON.stringify(ragQuery, null, 2)}

Respond with exactly 3 solutions in this JSON format:
{
  "solutions": [
    {
      "solution_id": 1,
      "score": "8/10",
      "explanation": "Detailed step-by-step reasoning and implementation approach",
      "references": ["Research source 1", "Documentation 2", "Industry report 3"]
    },
    {
      "solution_id": 2,
      "score": "9/10", 
      "explanation": "Another detailed approach with implementation steps",
      "references": ["Source 1", "Source 2", "Source 3"]
    },
    {
      "solution_id": 3,
      "score": "7/10",
      "explanation": "Third solution with step-by-step breakdown", 
      "references": ["Reference 1", "Reference 2", "Reference 3"]
    }
  ]
}`;

  try:
    console.log('Executing RAG query with OpenAI API...');
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: 'You are an expert innovation consultant. Always respond with valid JSON.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 2000,
        temperature: 0.8,
        response_format: { type: "json_object" }
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('OpenAI API error:', response.status, errorText);
      
      if (response.status === 429) {
        console.log('OpenAI quota exceeded, using fallback solutions');
        return generateFallbackSolutions(problemDescription);
      }
      
      throw new Error(`OpenAI API error: ${response.status} ${errorText}`);
    }

    const data = await response.json();
    console.log('OpenAI response received');

    const content = data.choices[0].message.content;
    const parsed = JSON.parse(content);
    
    const solutions = Array.isArray(parsed) ? parsed : (parsed.solutions || []);
    
    if (!Array.isArray(solutions) || solutions.length === 0) {
      throw new Error('Invalid response format from OpenAI');
    }
    
    console.log(`Generated ${solutions.length} RAG solutions`);

    return new Response(JSON.stringify({ 
      solutions,
      source: 'openai',
      ragQuery: true
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('OpenAI API failed:', error);
    return generateFallbackSolutions(problemDescription);
  }
}

// Fallback function to generate mock solutions in RAG format when APIs are unavailable
function generateFallbackSolutions(problemDescription: string) {
  console.log('Generating RAG-formatted fallback solutions for:', problemDescription);
  
  const fallbackSolutions = [
    {
      solution_id: 1,
      score: "8/10",
      explanation: "AI-Powered Analysis Solution: Step 1: Deploy machine learning algorithms for systematic problem analysis. Step 2: Implement data collection pipelines to gather relevant metrics. Step 3: Use pattern recognition to identify root causes. Step 4: Generate evidence-based recommendations using predictive modeling. This approach leverages artificial intelligence to provide data-driven insights with measurable outcomes.",
      references: ["IEEE AI Research Papers", "MIT Technology Review", "Nature Machine Intelligence"]
    },
    {
      solution_id: 2,
      score: "9/10",
      explanation: "Collaborative Platform Approach: Step 1: Establish multi-stakeholder engagement framework. Step 2: Create knowledge sharing networks connecting experts and communities. Step 3: Implement collaborative decision-making processes. Step 4: Build sustainable partnership structures. Step 5: Deploy continuous feedback loops for improvement. This solution focuses on leveraging collective intelligence and shared resources.",
      references: ["Harvard Business Review", "Stanford Social Innovation Review", "McKinsey Quarterly"]
    },
    {
      solution_id: 3,
      score: "7/10",
      explanation: "Biotechnology Integration Solution: Step 1: Conduct bioengineering feasibility assessment. Step 2: Design biological system interfaces with existing infrastructure. Step 3: Implement pilot testing with controlled biological processes. Step 4: Scale integration while maintaining biosafety protocols. Step 5: Monitor long-term sustainability metrics. This approach combines biological systems with technological innovation for sustainable outcomes.",
      references: ["Nature Biotechnology", "Cell", "Science Translational Medicine"]
    }
  ];

  return new Response(JSON.stringify({ 
    solutions: fallbackSolutions,
    note: "Demo RAG solutions generated - Add API keys for real AI-powered analysis.",
    source: 'fallback',
    ragQuery: true
  }), {
    headers: { ...corsHeaders, 'Content-Type': 'application/json' },
  });
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { problemDescription } = await req.json();
    console.log('Processing problem:', problemDescription);

    if (!problemDescription) {
      throw new Error('Problem description is required');
    }

    const geminiApiKey = Deno.env.get('GEMINI_API_KEY');
    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    
    // Prefer Gemini for real research, fallback to OpenAI, then mock data
    if (geminiApiKey) {
      console.log('Using Gemini API for real research data');
      return await generateWithGemini(problemDescription, geminiApiKey);
    } else if (openAIApiKey) {
      console.log('Using OpenAI API');
      return await generateWithOpenAI(problemDescription, openAIApiKey);
    } else {
      console.log('No API keys found, using fallback solutions');
      return generateFallbackSolutions(problemDescription);
    }

  } catch (error) {
    console.error('Error in generate-solutions function:', error);
    
    return new Response(
      JSON.stringify({ 
        error: error.message,
        details: 'Failed to generate solutions. Please check your API credentials or try again later.'
      }), 
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});